{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["includedColumns","excludedColumns","classes","root","css","App","inputRef","React","useRef","useState","csvFile","setCSVFile","csvData","setCSVData","courseName","setCourseName","handleCSVFile","useCallback","event","target","files","completeParse","result","console","log","data","parseCSV","papa","parse","complete","header","handleCourseName","e","value","courseNames","Set","forEach","d","Object","keys","filter","v","startsWith","map","add","columns","some","inc","every","exc","name","i","toString","dataRows","values","split","rows","handleCopyEmails","navigator","clipboard","writeText","join","className","type","ref","onChange","onClick","Array","from","sort","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51c61a2c.chunk.js","sourcesContent":["import React from \"react\";\nimport papa from \"papaparse\";\nimport { css } from \"@emotion/css\";\n\ntype CSVObject = Record<string, string>;\n\nconst courseColumnName = \"課程\" as const;\nconst courseColumnNameExclude = \"課程選擇\" as const;\nconst cancelledCourseNumberColumnName = \"取消課程編號\" as const;\nconst emailColumnName = \"電子郵件地址\" as const;\nconst includedColumns = [\"時間戳記\", \"稱呼\", \"電子郵件地址\"] as const;\nconst excludedColumns = [] as const;\n\nconst classes = {\n  root: css`\n    width: 100%;\n    height: 100%;\n  `,\n};\n\nfunction App() {\n  const inputRef = React.useRef(null);\n  const [csvFile, setCSVFile] = React.useState<File>();\n  const [csvData, setCSVData] = React.useState<Array<CSVObject>>([{}]);\n  const [courseName, setCourseName] = React.useState(\"\");\n\n  const handleCSVFile = React.useCallback<\n    React.ChangeEventHandler<HTMLInputElement>\n  >((event) => {\n    setCSVFile(event.target.files?.[0]);\n  }, []);\n  const completeParse = React.useCallback(\n    (result: papa.ParseResult<CSVObject>) => {\n      console.log(result.data);\n      setCSVData(result.data);\n    },\n    []\n  );\n  const parseCSV = React.useCallback(() => {\n    if (!csvFile) return;\n    papa.parse(csvFile, {\n      complete: completeParse,\n      header: true,\n    });\n  }, [csvFile, completeParse]);\n  const handleCourseName = React.useCallback<\n    React.ChangeEventHandler<HTMLSelectElement>\n  >((e) => {\n    setCourseName(e.target.value);\n  }, []);\n\n  const courseNames = new Set<string>();\n  csvData.forEach((d) => {\n    Object.keys(d)\n      .filter(\n        (v) => v !== courseColumnNameExclude && v.startsWith(courseColumnName)\n      )\n      .map((v) => courseNames.add(d[v]));\n  });\n  const columns = Object.keys(csvData[0]).filter(\n    (v) =>\n      includedColumns.some((inc) => v.startsWith(inc)) &&\n      excludedColumns.every((exc) => !v.startsWith(exc))\n  );\n  const header = (\n    <tr>\n      {columns.map((name, i) => (\n        <td key={i.toString()}>{name}</td>\n      ))}\n    </tr>\n  );\n  const dataRows = csvData\n    .filter((d) => Object.values(d).some((v) => v === courseName))\n    .filter((d) => {\n      const cancelledCourses = d[cancelledCourseNumberColumnName]\n        .split(\",\")\n        .filter((v) => v !== \"\");\n      return cancelledCourses.every((name) => d[name] !== courseName);\n    });\n  const rows = dataRows.map((d, i) => (\n    <tr key={i.toString()}>\n      {columns.map((name) => (\n        <td>{d[name]}</td>\n      ))}\n    </tr>\n  ));\n  const handleCopyEmails = React.useCallback<\n    React.MouseEventHandler<HTMLButtonElement>\n  >(\n    (e) => {\n      navigator.clipboard.writeText(\n        dataRows.map((d) => d[emailColumnName]).join()\n      );\n    },\n    [dataRows]\n  );\n  return (\n    <div className={classes.root}>\n      <input type=\"file\" ref={inputRef} name=\"file\" onChange={handleCSVFile} />\n      <button onClick={parseCSV}>Parse</button>\n      <select onChange={handleCourseName}>\n        {Array.from(courseNames)\n          .sort()\n          .map((name) => (\n            <option>{name}</option>\n          ))}\n      </select>\n      <div>{rows.length}人</div>\n      <button onClick={handleCopyEmails}>Copy Emails</button>\n      <table>\n        <thead>{header}</thead>\n        <tbody>{rows}</tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}